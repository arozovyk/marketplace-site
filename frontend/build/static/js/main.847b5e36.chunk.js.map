{"version":3,"sources":["Web3Client.js","App.js","reportWebVitals.js","index.js"],"names":["selectedAccount","nftContract","NFT_ADDR","CONTRACT_ADDRESS","init","a","provider","window","ethereum","web3","Web3","eth","Contract","nft_abi","abi","on","accounts","console","log","request","method","then","catch","err","getSelectedAccount","getSelectedAccountsNftBalance","methods","balanceOf","call","mint","tokenId","tokenURI","send","from","getTokenUri","getOwnerOf","ownerOf","ipfs","create","styles","padding","textAlign","App","props","changeHandler","event","setState","uploadedFile","target","files","updateNftBalance","balance","selectedAccountsNftBalance","parseInt","handleSubmission","add","state","nft_asset","res","json","name","nft_name","description","nft_description","image","path","JSON","stringify","ipfs_path","fetchAccount","handleInputChange","value","type","handleSubmit","newTokenId","lastTokenId","asset_res","metadata_res","preventDefault","findByTokenId","getJsonAsync","jm","tokenMetadata","tokenUri","tokenOwner","acc","url","fetch","response","responseJson","error","className","style","Panel","header","bordered","this","onSubmit","required","onChange","Button","color","appearance","src","width","height","alt","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.847b5e36.chunk.js","sourcesContent":["// import NFTContractBuild from 'contracts/NFT.json';\nimport Web3 from \"web3\";\nimport nft_abi from \"./abi/MyNFT.json\";\nimport nft_addr from \"./addresses/nft.address.json\";\n\nconst NFT_ADDR = nft_addr.CONTRACT_ADDRESS;\n\nlet selectedAccount;\n// let nftContract;\nlet nftContract;\n\n \nexport const init = async () => {\n  let provider = window.ethereum;\n\n  const web3 = new Web3(provider);\n\n  nftContract = new web3.eth.Contract(nft_abi.abi, NFT_ADDR);\n\n   if (typeof provider !== \"undefined\") {\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\n      selectedAccount = accounts[0];\n      console.log(`Selected account changed to ${selectedAccount}`);\n    });\n    return await provider\n      .request({ method: \"eth_requestAccounts\" })\n      .then((accounts) => {\n        selectedAccount = accounts[0];\n        console.log(`Selected account is ${selectedAccount}`);\n      })\n      .catch((err) => {\n        console.log(err);\n        return;\n      });\n  }\n};\nexport const getSelectedAccount = async () => {\n  return selectedAccount;\n};\nexport const getSelectedAccountsNftBalance = async () => {\n  return await nftContract.methods.balanceOf(selectedAccount).call();\n};\n\nexport const mint = async (tokenId, tokenURI) => {\n  console.log(tokenId);\n  console.log(tokenURI);\n  return await nftContract.methods\n    .mint(selectedAccount, tokenId, \"https://ipfs.io/ipfs/\" + tokenURI)\n    .send({ from: selectedAccount });\n};\n\nexport const getTokenUri = async (tokenId) => {\n  return await nftContract.methods.tokenURI(tokenId).call();\n};\nexport const getOwnerOf = async (tokenId) => {\n  return await nftContract.methods.ownerOf(tokenId).call();\n};\n","import React from \"react\";\nimport { create } from \"ipfs-http-client\";\nimport { Panel } from \"rsuite\";\nimport { Button } from \"rsuite\";\n\nimport \"rsuite/dist/rsuite.min.css\";\n\n//import { render } from \"react-dom\";\n//import { AgGridColumn, AgGridReact } from \"ag-grid-react\";\nimport {\n  getSelectedAccount,\n  init,\n  mint,\n  getSelectedAccountsNftBalance,\n  getTokenUri,\n  getOwnerOf,\n} from \"./Web3Client\";\nconst ipfs = create(\"http://localhost:5001\");\nconst INCR_ID = 123;\nconst styles = {\n  padding: 20,\n  textAlign: \"left\",\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      nft_name: null,\n      nft_asset: null,\n      nft_description: null,\n      selectedAccount: null,\n      uploadedFile: null,\n      ipfs_path: null,\n      tokenId: null,\n      tokenMetadata: null,\n      tokenUri: null,\n      tokenOwner: null,\n      lastTokenId: null,\n      selectedAccountsNftBalance: 0,\n    };\n  }\n\n  componentDidMount() {\n    init()\n      .then(() => {\n        getSelectedAccount()\n          .then((acc) => {\n            this.setState({ selectedAccount: acc });\n          })\n          .then(() => this.updateNftBalance());\n      })\n      .catch(() => console.log(\"Failed to initialize.\"));\n  }\n\n  changeHandler = (event) => {\n    this.setState({ uploadedFile: event.target.files[0] });\n  };\n\n  updateNftBalance = () => {\n    getSelectedAccountsNftBalance().then((balance) => {\n      this.setState({ selectedAccountsNftBalance: parseInt(balance) });\n    });\n  };\n\n  handleSubmission = () => {\n    ipfs.add(this.state.nft_asset).then((res) => {\n      var json = {\n        name: this.state.nft_name,\n        description: this.state.nft_description,\n        image: \"https://ipfs.io/ipfs/\" + res.path,\n      };\n      ipfs\n        .add(JSON.stringify(json))\n        .then((res) => this.setState({ ipfs_path: res.path }));\n    });\n  };\n\n  fetchAccount = () => {};\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"file\" ? target.files[0] : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value,\n    });\n  };\n  getJsonAsync(url) {\n    return fetch(url)\n      .then((response) => response.json())\n      .then((responseJson) => {\n        return responseJson;\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }\n  handleSubmit = (event) => {\n    const newTokenId = this.state.selectedAccountsNftBalance + INCR_ID;\n    this.setState({ lastTokenId: newTokenId });\n    ipfs.add(this.state.nft_asset).then((asset_res) => {\n      var json = {\n        name: this.state.nft_name,\n        description: this.state.nft_description,\n        image: \"https://ipfs.io/ipfs/\" + asset_res.path,\n      };\n      ipfs.add(JSON.stringify(json)).then((metadata_res) => {\n        this.setState({ ipfs_path: metadata_res.path });\n        mint(newTokenId+10, metadata_res.path + \"z\").then((res) => {\n          this.updateNftBalance();\n        });\n      });\n    });\n\n    event.preventDefault();\n  };\n\n  findByTokenId = (event) => {\n    getTokenUri(this.state.tokenId).then((res) => {\n      this.getJsonAsync(res).then((jm) =>\n        this.setState({\n          tokenMetadata: JSON.stringify(jm),\n          tokenUri: jm.image,\n        })\n      );\n    });\n    getOwnerOf(this.state.tokenId).then((res) => {\n      this.setState({\n        tokenOwner: res,\n      });\n    });\n\n    event.preventDefault();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={styles}>\n          <Panel header=\"Mint a new NFT\" bordered>\n            <p>Current connected account :{this.state.selectedAccount} </p>\n            <p>\n              Current accounts nft balance :\n              {this.state.selectedAccountsNftBalance}\n            </p>\n            <p>Last ipfs path :{this.state.ipfs_path} </p>\n            <p>Last token id :{this.state.lastTokenId} </p>\n\n            <div>\n              <form onSubmit={this.handleSubmit}>\n                <p>\n                  <label>Name:</label>\n                  <input\n                    type=\"text\"\n                    required\n                    name=\"nft_name\"\n                    onChange={this.handleInputChange}\n                  />\n                </p>\n                <p>\n                  <label>\n                    Description:\n                    <input\n                      type=\"text\"\n                      required\n                      name=\"nft_description\"\n                      onChange={this.handleInputChange}\n                    />\n                  </label>\n                </p>\n                <p>\n                  <label>\n                    File to mint:\n                    <input\n                      type=\"file\"\n                      required\n                      name=\"nft_asset\"\n                      onChange={this.handleInputChange}\n                    />\n                  </label>\n                </p>\n                <div>\n                  <Button\n                    color=\"violet\"\n                    appearance=\"primary\"\n                    type=\"submit\"\n                    value=\"Mint NFT\"\n                  >\n                    Mint\n                  </Button>\n                </div>\n              </form>\n            </div>\n          </Panel>\n          <Panel header=\"Display owned NFT\" bordered>\n            <div>\n              <form onSubmit={this.findByTokenId}>\n                <p>\n                  <label>\n                    Token id:\n                    <input\n                      type=\"text\"\n                      required\n                      name=\"tokenId\"\n                      onChange={this.handleInputChange}\n                    />\n                  </label>\n                </p>\n                <Button\n                  color=\"red\"\n                  appearance=\"primary\"\n                  type=\"submit\"\n                  value=\"Mint NFT\"\n                >\n                  Find\n                </Button>\n              </form>\n            </div>\n            {this.state.tokenMetadata == null ? (\n              \"\"\n            ) : (\n              <div>\n                <p style={{ color: \"green\" }}>\n                  NFT metadata : {this.state.tokenMetadata}\n                </p>\n                <p>Owner : {this.state.tokenOwner}</p>\n                <p>\n                  <img\n                    src={this.state.tokenUri}\n                    width=\"300px\"\n                    height=\"300px\"\n                    alt=\"new\"\n                  />\n                </p>\n              </div>\n            )}\n          </Panel>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}